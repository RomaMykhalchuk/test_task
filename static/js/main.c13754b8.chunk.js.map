{"version":3,"sources":["store/filterData.js","store/actionTypes.js","store/peopleData.js","store/sortType.js","store/index.js","components/SignIn/SignIn.jsx","components/TableHeader/TableHeader.jsx","components/Person/Person.jsx","components/TableBody/TableBody.jsx","helpers/use-debounce.js","components/PeopleList/PeopleList.jsx","helpers/api.js","components/PersonProfile/PersonProfile.jsx","components/SearchError/SearchError.jsx","App.jsx","serviceWorker.js","index.js"],"names":["reducer","query","action","type","surname","peopleList","list","sortBy","typeOfSort","rootReducer","combineReducers","peopleData","peopleDataReducer","filterData","filterReducer","sortTypeReducer","store","createStore","composeWithDevTools","SignIn","history","useHistory","className","value","onClick","localStorage","setItem","push","TableHeader","map","cellName","key","Date","Person","dateFromServer","personProfile","name","email","dob","picture","first","last","src","medium","alt","date","moment","toDate","toLocaleDateString","to","login","uuid","console","log","TableBody","useSelector","state","searchQuery","sortType","debouncedValue","searchValue","delay","useState","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","sortedList","normalizedQuery","toLowerCase","filter","person","includes","getFilteredBySurname","sort","firstPerson","secondPerson","age","localeCompare","getSortedByParam","PeopleList","dispatch","useDispatch","a","axios","get","data","results","getPeopleList","PersonProfile","personData","phone","location","title","large","city","country","SearchError","App","inputedData","useLocation","pathname","clear","id","placeholder","onChange","event","target","defaultValue","e","path","component","exact","render","routeProps","currentPerson","find","match","params","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c13754b8.chunk.js","sourcesContent":["import { FILTER_BY_SURNAME } from './actionTypes';\n\nexport const handleSearchQuery = (surname) => ({type: FILTER_BY_SURNAME, surname});\n\nconst reducer = (query = '', action) => {\n  switch (action.type) {\n    case FILTER_BY_SURNAME: \n      return action.surname;\n    default:\n      return query;\n  }\n};\n\nexport default reducer;","export const LOAD_DATA_FROM_SERVER = 'LOAD_DATA_FROM_SERVER';\nexport const FILTER_BY_SURNAME = 'FILTER_BY_SURNAME';\nexport const SET_SORT_TYPE = 'SET_SORT_TYPE';\n","import {LOAD_DATA_FROM_SERVER} from './actionTypes';\n\nexport const handleDataLoading = (list) => ({type: LOAD_DATA_FROM_SERVER, list});\n\nconst reducer = (peopleList = [], action) => {\n  switch (action.type) {\n    case LOAD_DATA_FROM_SERVER:\n      return action.list;\n    default:\n      return peopleList;\n  }\n};\n\nexport default reducer;","import { SET_SORT_TYPE } from './actionTypes';\n\nexport const setSortType = (typeOfSort) => ({type: SET_SORT_TYPE, typeOfSort});\n\nconst reducer = (sortBy = '', action) => {\n  switch (action.type) {\n    case SET_SORT_TYPE:\n      return action.typeOfSort;\n    default:\n      return sortBy;\n  }\n};\n\nexport default reducer;","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport filterReducer from './filterData';\nimport peopleDataReducer from './peopleData';\nimport sortTypeReducer from './sortType';\n\nconst rootReducer = combineReducers({\n  peopleData: peopleDataReducer,\n  filterData: filterReducer,\n  sortBy: sortTypeReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './SingIn.scss';\n\nexport const SignIn = () => {\n\n\tconst history = useHistory();\n\tconst handleLoginStatus = () => {\n\t\tlocalStorage.setItem('isLoggedIn', true);\n\t\thistory.push('/people')\n\t};\n\n\treturn (\n\t\t<form>\n\t\t\t<input\n\t\t\t\ttype=\"button\"\n\t\t\t\tclassName=\"button button--sign-in\"\n\t\t\t\tvalue=\"sign in\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\thandleLoginStatus();\n\t\t\t\t}} />\n\t\t</form>\n\t);\n};","import React from 'react';\n\nexport const TableHeader = () => {\n\n  const tableCaptions = ['Full Name', 'Photo', 'Email', 'dob'];\n\n  return (\n    <thead className=\"table__header\">\n      <tr className=\"table__header-row\">\n        {tableCaptions.map(cellName => <th\n          key={`${cellName} ${new Date()}`}\n          className=\"table__header-cell\">\n          {cellName}\n        </th>)}\n        <th className=\"table__header-cell\">Details</th>\n      </tr>\n    </thead>\n  );\n};","import React from 'react';\nimport moment from 'moment';\nimport './Person.scss';\nimport { NavLink } from 'react-router-dom';\n\nexport const Person = ({ personProfile }) => {\n  const { name, email, dob, picture } = personProfile;\n\n  const getDateFromISO = (dateFromServer) => {\n    let momentDate = moment(dateFromServer, 'YYYY-MM-DD');\n    let jsDate = momentDate.toDate();\n    return jsDate.toLocaleDateString();\n  };\n\n  return (\n    <tr className=\"table__person\">\n      <td className=\"table__person-cell\">{`${name.first} ${name.last}`}</td>\n      <td className=\"table__person-cell\"><img src={picture.medium} alt={name.first} /></td>\n      <td className=\"table__person-cell\">{email}</td>\n      <td className=\"table__person-cell\">{getDateFromISO(dob.date)}</td>\n      <td className=\"table__person-cell\">\n        <NavLink\n          className=\"table__person-details-link\"\n          to={`profile/${personProfile.login.uuid}`}\n          onClick={() => console.log('more')}>\n          More Info\n          </NavLink>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from '../Person/Person';\nimport { useSelector } from 'react-redux';\nimport { useDebounce } from '../../helpers/use-debounce';\n\nexport const TableBody = () => {\n\n  const peopleList = useSelector(state => state.peopleData);\n  const searchQuery = useSelector(state => state.filterData);\n  const sortType = useSelector(state => state.sortBy);\n  const debouncedValue = useDebounce(searchQuery, 1000);\n\n  const getSortedByParam = () => {\n    switch (sortType) {\n      case 'age':\n        return (firstPerson, secondPerson) => {\n          return firstPerson.dob.age - secondPerson.dob.age;\n        };\n      case 'surname':\n        return (firstPerson, secondPerson) => {\n          return firstPerson.name.last.localeCompare(secondPerson.name.last);\n        };\n      default:\n        return;\n    }\n  };\n  const getFilteredBySurname = () => {\n    const normalizedQuery = debouncedValue.toLowerCase();\n    return peopleList\n      .filter(person => {\n        return person.name.last\n          .toLowerCase()\n          .includes(normalizedQuery);\n      });\n  };\n  const sortedList = getFilteredBySurname()\n    .sort(getSortedByParam());\n\n  return (\n    <tbody className=\"table__body\">\n      {sortedList.map(person => <Person\n        personProfile={person}\n        key={person.login.uuid}\n      />)}\n    </tbody>\n  );\n};","import { useState, useEffect } from 'react';\n\nexport const useDebounce = (searchValue, delay) => {\n  const [debouncedValue, setDebouncedValue] = useState(searchValue);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(searchValue);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  },\n  [searchValue, delay]);\n\n  return debouncedValue;\n};\n","import React, { useEffect } from 'react';\nimport './PeopleList.scss';\nimport { getDataFromServer } from '../../helpers/api';\nimport { useDispatch } from 'react-redux';\nimport { TableHeader } from '../TableHeader/TableHeader';\nimport { TableBody } from '../TableBody/TableBody';\nimport { handleDataLoading } from '../../store/peopleData';\n\nexport const PeopleList = () => {\n\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    const getPeopleList = async () => {\n      const { data } = await getDataFromServer();\n\n      dispatch(handleDataLoading(data.results));\n    };\n    getPeopleList();\n  }, [dispatch]);\n\n  return (\n    <>\n      <table className=\"table\">\n        <caption className=\"table__capture\">People table</caption>\n        <TableHeader />\n        <TableBody />\n      </table>\n    </>\n  );\n};","import axios from 'axios';\nconst URL = 'https://randomuser.me/api/?results=50';\n\nexport const getDataFromServer = () => {\n  return axios.get(URL);\n}","import React from 'react';\nimport './PersonProfile.scss';\n\nexport const PersonProfile = ({ personData }) => {\n\n  const { picture, name, email, phone, location } = personData;\n  return (\n    <article className=\"main__person-profile\">\n      <h1>{`${name.title} ${name.first} ${name.last}`}</h1>\n      <img src={picture.large} alt={name.first} className=\"main__person-photo\"/>\n      <p>Mobile: {phone} </p>\n      <p>Email: {email}</p>\n      <p>{location.city}, {location.country}</p>\n    </article>\n  )\n};\n","import React from 'react';\nimport './SearchError.scss';\nimport { NavLink } from 'react-router-dom';\nexport const SearchError = () => {\n\n  return (\n    <>\n      <h1 className=\"main__error-page\">Unfortunately, there is no such a person </h1>\n      <NavLink to=\"/people\" className=\"main__error-button-link\">\n        <button className=\"button main__error-button\">Got to the people list</button>\n      </NavLink>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport { Switch, Route, useLocation, NavLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport { handleSearchQuery } from '../src/store/filterData';\nimport { SignIn } from './components/SignIn/SignIn';\nimport { PeopleList } from './components/PeopleList/PeopleList';\nimport { PersonProfile } from './components/PersonProfile/PersonProfile';\nimport { SearchError } from './components/SearchError/SearchError';\nimport { setSortType } from './store/sortType';\n\nfunction App() {\n\n  const inputedData = useSelector(state => state.filterData);\n  const peopleList = useSelector(state => state.peopleData);\n  const sortType = useSelector(state => state.sortBy);\n\n  const location = useLocation();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (location.pathname === '/') {\n      localStorage.clear();\n    }\n  }, [location]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <h1 className=\"header__title\">people table data</h1>\n        <NavLink to=\"/\">\n          <button type='button' className=\"header__button button\">Go Back</button>\n        </NavLink>\n        <input\n          className=\"header__input\"\n          type=\"text\"\n          name=\"Filter by Surname\"\n          id=\"filter\"\n          placeholder=\"filter by surname\"\n          value={inputedData}\n          onChange={(event) => {\n            const { value } = event.target;\n            dispatch(handleSearchQuery(value));\n          }}\n        />\n        <select\n          defaultValue={sortType}\n          onChange={(e) => {\n            const { value } = e.target;\n            dispatch(setSortType(value));\n          }}\n        >\n          <option value=\"\">Sort By</option>\n          <option value=\"surname\">Surname</option>\n          <option value=\"age\">Age</option>\n        </select>\n      </header>\n      <main className=\"main\">\n        <Switch>\n          <Route path='/' component={SignIn} exact />\n          <Route path='/people' component={PeopleList} />\n          <Route\n            path='/profile/:id'\n            render={(routeProps) => {\n              const currentPerson = peopleList\n                .find(person => person.login.uuid === routeProps.match.params.id);\n              return currentPerson ?\n                <PersonProfile personData={currentPerson} /> :\n                <SearchError />\n            }}\n          />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}